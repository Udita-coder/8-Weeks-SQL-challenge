Introduction
Danny seriously loves Japanese food so in the beginning of 2021, he decides to embark upon a risky venture and opens up a cute little restaurant that sells his 3 favourite foods: sushi, curry and ramen.

Danny’s Diner is in need of your assistance to help the restaurant stay afloat - the restaurant has captured some very basic data from their few months of operation but have no idea how to use their data to help them run the business.

Problem Statement
Danny wants to use the data to answer a few simple questions about his customers, especially about their visiting patterns, how much money they’ve spent and also which menu items are their favourite. Having this deeper connection with his customers will help him deliver a better and more personalised experience for his loyal customers.

He plans on using these insights to help him decide whether he should expand the existing customer loyalty program - additionally he needs help to generate some basic datasets so his team can easily inspect the data without needing to use SQL.

Danny has provided you with a sample of his overall customer data due to privacy issues - but he hopes that these examples are enough for you to write fully functioning SQL queries to help him answer his questions!

Danny has shared with you 3 key datasets for this case study:

sales
menu
members

Case Study Questions
Each of the following case study questions can be answered using a single SQL statement:

/* 1. What is the total amount each customer spent at the restaurant? */
SELECT s.customer_id, SUM(m.price) AS Total_Amount FROM menu m INNER JOIN sales s ON m.product_id = s.product_id
GROUP BY s.customer_id;

/* 2. How many days has each customer visited the restaurant? */
SELECT customer_id, COUNT(DISTINCT order_date) AS Total_Days FROM sales
GROUP BY customer_id;

/* 3. What was the first item from the menu purchased by each customer? */
SELECT Temp.customer_id, Temp.product_name FROM 
(
  SELECT s.customer_id, m.product_name, RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_Date ASC) AS rank 
  FROM sales s INNER JOIN menu m ON s.product_id = m.product_id
)Temp
WHERE Temp.rank = 1;

/* 4. What is the most purchased item on the menu and how many times was it purchased by all customers? */
SELECT TOP 1 m.product_name, (COUNT(s.product_id)) AS Purchase FROM sales s INNER JOIN menu m ON s.product_id = m.product_id
GROUP BY m.product_name, s.product_id
ORDER BY Purchase DESC ;

/* 5. Which item was the most popular for each customer? */
SELECT Temp.customer_id, Temp.product_name, Temp.total FROM 
(
   SELECT s.customer_id, m.product_name, COUNT(s.product_id) AS total, DENSE_RANK() OVER (Partition By s.customer_id ORDER BY COUNT(s.product_id) DESC) AS Rank FROM sales s INNER JOIN menu m 
   ON s.product_id = m.product_id
   GROUP BY s.customer_id, m.product_name
)Temp
WHERE Temp.Rank = 1;

/* 6. Which item was purchased first by the customer after they became a member? */
SELECT Temp.product_name,Temp.order_date, Temp.customer_id FROM 
(SELECT m.product_name, s.customer_id, s.order_date, mb.join_date, DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date ASC) AS rank FROM menu m INNER JOIN sales s ON m.product_id = s.product_id INNER JOIN members mb ON s.customer_id = mb.customer_id
WHERE s.order_date >= mb.join_date 
GROUP BY s.customer_id, m.product_name, s.order_date, mb.join_date)Temp
WHERE Temp.rank=1; 

/* 7. Which item was purchased just before the customer became a member? */
SELECT Temp.product_name,Temp.order_date, Temp.customer_id FROM 
(SELECT m.product_name, s.customer_id, s.order_date, mb.join_date, DENSE_RANK() OVER (PARTITION BY s.customer_id ORDER BY s.order_date DESC) AS rank FROM menu m INNER JOIN sales s ON m.product_id = s.product_id INNER JOIN members mb ON s.customer_id = mb.customer_id
WHERE s.order_date < mb.join_date 
GROUP BY s.customer_id, m.product_name, s.order_date, mb.join_date)Temp
WHERE Temp.rank=1; 

/* 8. What is the total items and amount spent for each member before they became a member? */
SELECT  s.customer_id, COUNT(DISTINCT m.product_name) AS Total_items, SUM(m.price) AS Total_amount FROM menu m INNER JOIN sales s ON m.product_id = s.product_id INNER JOIN members mb ON s.customer_id = mb.customer_id
WHERE s.order_date < mb.join_date 
GROUP BY s.customer_id;

/* 9. If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have? */
SELECT s.customer_id, SUM(CASE WHEN m.product_name = 'sushi' THEN (m.price*10*2) ELSE (m.price*10*1) END) AS Points FROM sales s INNER JOIN menu m ON s.product_id = m.product_id
GROUP BY s.customer_id;

/* 10. In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi -
       how many points do customer A and B have at the end of January? */

















